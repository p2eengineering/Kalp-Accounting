// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	queryresult "github.com/hyperledger/fabric-protos-go/ledger/queryresult"
	mock "github.com/stretchr/testify/mock"
)

// StateQueryIteratorInterface is an autogenerated mock type for the StateQueryIteratorInterface type
type StateQueryIteratorInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *StateQueryIteratorInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasNext provides a mock function with given fields:
func (_m *StateQueryIteratorInterface) HasNext() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *StateQueryIteratorInterface) Next() (*queryresult.KV, error) {
	ret := _m.Called()

	var r0 *queryresult.KV
	if rf, ok := ret.Get(0).(func() *queryresult.KV); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queryresult.KV)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStateQueryIteratorInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateQueryIteratorInterface creates a new instance of StateQueryIteratorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateQueryIteratorInterface(t mockConstructorTestingTNewStateQueryIteratorInterface) *StateQueryIteratorInterface {
	mock := &StateQueryIteratorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
